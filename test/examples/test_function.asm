Dump of assembler code for function test_function:
=> 0x00007ffff7fbf0e0 <+0>:	push   %rbp
   0x00007ffff7fbf0e1 <+1>:	push   %r15
   0x00007ffff7fbf0e3 <+3>:	push   %r14
   0x00007ffff7fbf0e5 <+5>:	push   %r13
   0x00007ffff7fbf0e7 <+7>:	push   %r12
   0x00007ffff7fbf0e9 <+9>:	push   %rbx
   0x00007ffff7fbf0ea <+10>:	sub    $0x18,%rsp
   0x00007ffff7fbf0ee <+14>:	movslq 0x1c(%rdi),%rdx
   0x00007ffff7fbf0f2 <+18>:	mov    0x58(%rdi),%rax
   0x00007ffff7fbf0f6 <+22>:	mov    (%rsi),%rbp
   0x00007ffff7fbf0f9 <+25>:	imul   %rax,%rbp
   0x00007ffff7fbf0fd <+29>:	add    0x28(%rdi),%rbp
   0x00007ffff7fbf101 <+33>:	movslq 0x18(%rdi),%rcx
   0x00007ffff7fbf105 <+37>:	add    %rbp,%rax
   0x00007ffff7fbf108 <+40>:	cmp    %rcx,%rax
   0x00007ffff7fbf10b <+43>:	mov    %rcx,%rsi
   0x00007ffff7fbf10e <+46>:	cmovle %rax,%rsi
   0x00007ffff7fbf112 <+50>:	test   %rcx,%rcx
   0x00007ffff7fbf115 <+53>:	cmovs  %rax,%rsi
   0x00007ffff7fbf119 <+57>:	mov    %rdx,%rax
   0x00007ffff7fbf11c <+60>:	mov    %rax,-0x78(%rsp)
   0x00007ffff7fbf121 <+65>:	test   %rdx,%rdx
   0x00007ffff7fbf124 <+68>:	jle    0x7ffff7fbf7c2 <test_function+1762>
   0x00007ffff7fbf12a <+74>:	sub    %rbp,%rsi
   0x00007ffff7fbf12d <+77>:	mov    %rsi,%rax
   0x00007ffff7fbf130 <+80>:	test   %rsi,%rsi
   0x00007ffff7fbf133 <+83>:	jle    0x7ffff7fbf7c2 <test_function+1762>
   0x00007ffff7fbf139 <+89>:	mov    %rbp,-0x70(%rsp)
   0x00007ffff7fbf13e <+94>:	mov    (%rdi),%rcx
   0x00007ffff7fbf141 <+97>:	mov    %rcx,-0x80(%rsp)
   0x00007ffff7fbf146 <+102>:	mov    0x8(%rdi),%rsi
   0x00007ffff7fbf14a <+106>:	mov    0x10(%rdi),%rdi
   0x00007ffff7fbf14e <+110>:	mov    %rax,%rcx
   0x00007ffff7fbf151 <+113>:	sar    $0x3,%rcx
   0x00007ffff7fbf155 <+117>:	mov    %rax,%r12
   0x00007ffff7fbf158 <+120>:	and    $0xfffffffffffffff8,%r12
   0x00007ffff7fbf15c <+124>:	sub    %r12,%rax
   0x00007ffff7fbf15f <+127>:	mov    %rax,-0x68(%rsp)
   0x00007ffff7fbf164 <+132>:	mov    %rcx,-0x38(%rsp)
   0x00007ffff7fbf169 <+137>:	test   %rcx,%rcx
   0x00007ffff7fbf16c <+140>:	je     0x7ffff7fbf660 <test_function+1408>
   0x00007ffff7fbf172 <+146>:	mov    -0x78(%rsp),%r11
   0x00007ffff7fbf177 <+151>:	vmovd  %r11d,%xmm0
   0x00007ffff7fbf17c <+156>:	vpbroadcastd %xmm0,%ymm0
   0x00007ffff7fbf181 <+161>:	lea    -0x1(%r11),%rcx
   0x00007ffff7fbf185 <+165>:	mov    %rcx,-0x48(%rsp)
   0x00007ffff7fbf18a <+170>:	mov    %r11d,%ecx
   0x00007ffff7fbf18d <+173>:	and    $0x7,%ecx
   0x00007ffff7fbf190 <+176>:	mov    %rcx,-0x58(%rsp)
   0x00007ffff7fbf195 <+181>:	sub    %rcx,%r11
   0x00007ffff7fbf198 <+184>:	mov    -0x70(%rsp),%rdx
   0x00007ffff7fbf19d <+189>:	vmovd  %edx,%xmm1
   0x00007ffff7fbf1a1 <+193>:	vpbroadcastd %xmm1,%ymm1
   0x00007ffff7fbf1a6 <+198>:	movabs $0x7ffff7fbe000,%rax
   0x00007ffff7fbf1b0 <+208>:	vpaddd (%rax),%ymm1,%ymm1
   0x00007ffff7fbf1b4 <+212>:	vpmulld %ymm1,%ymm0,%ymm0
   0x00007ffff7fbf1b9 <+217>:	vmovd  %xmm0,%eax
   0x00007ffff7fbf1bd <+221>:	vpextrd $0x1,%xmm0,%ecx
   0x00007ffff7fbf1c3 <+227>:	sub    %eax,%ecx
   0x00007ffff7fbf1c5 <+229>:	shl    $0x3,%ecx
   0x00007ffff7fbf1c8 <+232>:	vmovd  %ecx,%xmm1
   0x00007ffff7fbf1cc <+236>:	vpbroadcastd %xmm1,%ymm1
   0x00007ffff7fbf1d1 <+241>:	mov    -0x80(%rsp),%rax
   0x00007ffff7fbf1d6 <+246>:	lea    0x1c(%rax),%rax
   0x00007ffff7fbf1da <+250>:	mov    %rax,-0x60(%rsp)
   0x00007ffff7fbf1df <+255>:	xor    %ecx,%ecx
   0x00007ffff7fbf1e1 <+257>:	mov    %r12,-0x40(%rsp)
   0x00007ffff7fbf1e6 <+262>:	mov    %r11,-0x50(%rsp)
   0x00007ffff7fbf1eb <+267>:	nopl   0x0(%rax,%rax,1)
   0x00007ffff7fbf1f0 <+272>:	vmovq  %xmm0,%rax
   0x00007ffff7fbf1f5 <+277>:	movslq %eax,%r15
   0x00007ffff7fbf1f8 <+280>:	mov    %rax,%r10
   0x00007ffff7fbf1fb <+283>:	sar    $0x20,%r10
   0x00007ffff7fbf1ff <+287>:	vpextrq $0x1,%xmm0,%rax
   0x00007ffff7fbf205 <+293>:	movslq %eax,%r8
   0x00007ffff7fbf208 <+296>:	mov    %rax,%r12
   0x00007ffff7fbf20b <+299>:	sar    $0x20,%r12
   0x00007ffff7fbf20f <+303>:	vextracti128 $0x1,%ymm0,%xmm2
   0x00007ffff7fbf215 <+309>:	vmovq  %xmm2,%rax
   0x00007ffff7fbf21a <+314>:	movslq %eax,%r9
   0x00007ffff7fbf21d <+317>:	mov    %rax,%rbx
   0x00007ffff7fbf220 <+320>:	sar    $0x20,%rbx
   0x00007ffff7fbf224 <+324>:	vpextrq $0x1,%xmm2,%rax
   0x00007ffff7fbf22a <+330>:	movslq %eax,%r14
   0x00007ffff7fbf22d <+333>:	sar    $0x20,%rax
   0x00007ffff7fbf231 <+337>:	movslq %edx,%rbp
   0x00007ffff7fbf234 <+340>:	cmpq   $0x7,-0x48(%rsp)
   0x00007ffff7fbf23a <+346>:	mov    %rcx,0x10(%rsp)
   0x00007ffff7fbf23f <+351>:	mov    %rdx,0x8(%rsp)
   0x00007ffff7fbf244 <+356>:	mov    %r15,(%rsp)
   0x00007ffff7fbf248 <+360>:	mov    %r10,-0x8(%rsp)
   0x00007ffff7fbf24d <+365>:	mov    %r8,-0x10(%rsp)
   0x00007ffff7fbf252 <+370>:	mov    %r12,-0x18(%rsp)
   0x00007ffff7fbf257 <+375>:	mov    %r9,-0x20(%rsp)
   0x00007ffff7fbf25c <+380>:	mov    %rbx,-0x28(%rsp)
   0x00007ffff7fbf261 <+385>:	mov    %r14,-0x30(%rsp)
   0x00007ffff7fbf266 <+390>:	jae    0x7ffff7fbf270 <test_function+400>
   0x00007ffff7fbf268 <+392>:	xor    %r12d,%r12d
   0x00007ffff7fbf26b <+395>:	jmp    0x7ffff7fbf55d <test_function+1149>
   0x00007ffff7fbf270 <+400>:	vmovups (%rdi,%rbp,4),%ymm2
   0x00007ffff7fbf275 <+405>:	mov    %rbx,%rdx
   0x00007ffff7fbf278 <+408>:	mov    -0x60(%rsp),%rbx
   0x00007ffff7fbf27d <+413>:	lea    (%rbx,%rax,4),%r13
   0x00007ffff7fbf281 <+417>:	lea    (%rbx,%r14,4),%r14
   0x00007ffff7fbf285 <+421>:	mov    %r9,%rcx
   0x00007ffff7fbf288 <+424>:	lea    (%rbx,%rdx,4),%r9
   0x00007ffff7fbf28c <+428>:	lea    (%rbx,%rcx,4),%rdx
   0x00007ffff7fbf290 <+432>:	lea    (%rbx,%r12,4),%rcx
   0x00007ffff7fbf294 <+436>:	lea    (%rbx,%r8,4),%r8
   0x00007ffff7fbf298 <+440>:	lea    (%rbx,%r10,4),%r10
   0x00007ffff7fbf29c <+444>:	lea    (%rbx,%r15,4),%r15
   0x00007ffff7fbf2a0 <+448>:	xor    %r12d,%r12d
   0x00007ffff7fbf2a3 <+451>:	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
   0x00007ffff7fbf2b0 <+464>:	vmovss -0x1c(%rdx,%r12,4),%xmm3
   0x00007ffff7fbf2b7 <+471>:	vinsertps $0x10,-0x1c(%r9,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf2bf <+479>:	vinsertps $0x20,-0x1c(%r14,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf2c7 <+487>:	vinsertps $0x30,-0x1c(%r13,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf2cf <+495>:	vmovss -0x1c(%r15,%r12,4),%xmm4
   0x00007ffff7fbf2d6 <+502>:	vinsertps $0x10,-0x1c(%r10,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf2de <+510>:	vinsertps $0x20,-0x1c(%r8,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf2e6 <+518>:	vinsertps $0x30,-0x1c(%rcx,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf2ee <+526>:	vinsertf128 $0x1,%xmm3,%ymm4,%ymm3
   0x00007ffff7fbf2f4 <+532>:	vbroadcastss (%rsi,%r12,4),%ymm4
   0x00007ffff7fbf2fa <+538>:	vfmadd213ps %ymm2,%ymm3,%ymm4
   0x00007ffff7fbf2ff <+543>:	vmovups %ymm4,(%rdi,%rbp,4)
   0x00007ffff7fbf304 <+548>:	vmovss -0x18(%rdx,%r12,4),%xmm2
   0x00007ffff7fbf30b <+555>:	vinsertps $0x10,-0x18(%r9,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf313 <+563>:	vinsertps $0x20,-0x18(%r14,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf31b <+571>:	vinsertps $0x30,-0x18(%r13,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf323 <+579>:	vmovss -0x18(%r15,%r12,4),%xmm3
   0x00007ffff7fbf32a <+586>:	vinsertps $0x10,-0x18(%r10,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf332 <+594>:	vinsertps $0x20,-0x18(%r8,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf33a <+602>:	vinsertps $0x30,-0x18(%rcx,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf342 <+610>:	vinsertf128 $0x1,%xmm2,%ymm3,%ymm2
   0x00007ffff7fbf348 <+616>:	vbroadcastss 0x4(%rsi,%r12,4),%ymm3
   0x00007ffff7fbf34f <+623>:	vfmadd213ps %ymm4,%ymm2,%ymm3
   0x00007ffff7fbf354 <+628>:	vmovups %ymm3,(%rdi,%rbp,4)
   0x00007ffff7fbf359 <+633>:	vmovss -0x14(%rdx,%r12,4),%xmm2
   0x00007ffff7fbf360 <+640>:	vinsertps $0x10,-0x14(%r9,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf368 <+648>:	vinsertps $0x20,-0x14(%r14,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf370 <+656>:	vinsertps $0x30,-0x14(%r13,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf378 <+664>:	vmovss -0x14(%r15,%r12,4),%xmm4
   0x00007ffff7fbf37f <+671>:	vinsertps $0x10,-0x14(%r10,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf387 <+679>:	vinsertps $0x20,-0x14(%r8,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf38f <+687>:	vinsertps $0x30,-0x14(%rcx,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf397 <+695>:	vinsertf128 $0x1,%xmm2,%ymm4,%ymm2
   0x00007ffff7fbf39d <+701>:	vbroadcastss 0x8(%rsi,%r12,4),%ymm4
   0x00007ffff7fbf3a4 <+708>:	vfmadd213ps %ymm3,%ymm2,%ymm4
   0x00007ffff7fbf3a9 <+713>:	vmovups %ymm4,(%rdi,%rbp,4)
   0x00007ffff7fbf3ae <+718>:	vmovss -0x10(%rdx,%r12,4),%xmm2
   0x00007ffff7fbf3b5 <+725>:	vinsertps $0x10,-0x10(%r9,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf3bd <+733>:	vinsertps $0x20,-0x10(%r14,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf3c5 <+741>:	vinsertps $0x30,-0x10(%r13,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf3cd <+749>:	vmovss -0x10(%r15,%r12,4),%xmm3
   0x00007ffff7fbf3d4 <+756>:	vinsertps $0x10,-0x10(%r10,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf3dc <+764>:	vinsertps $0x20,-0x10(%r8,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf3e4 <+772>:	vinsertps $0x30,-0x10(%rcx,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf3ec <+780>:	vinsertf128 $0x1,%xmm2,%ymm3,%ymm2
   0x00007ffff7fbf3f2 <+786>:	vbroadcastss 0xc(%rsi,%r12,4),%ymm3
   0x00007ffff7fbf3f9 <+793>:	vfmadd213ps %ymm4,%ymm2,%ymm3
   0x00007ffff7fbf3fe <+798>:	vmovups %ymm3,(%rdi,%rbp,4)
   0x00007ffff7fbf403 <+803>:	vmovss -0xc(%rdx,%r12,4),%xmm2
   0x00007ffff7fbf40a <+810>:	vinsertps $0x10,-0xc(%r9,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf412 <+818>:	vinsertps $0x20,-0xc(%r14,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf41a <+826>:	vinsertps $0x30,-0xc(%r13,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf422 <+834>:	vmovss -0xc(%r15,%r12,4),%xmm4
   0x00007ffff7fbf429 <+841>:	vinsertps $0x10,-0xc(%r10,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf431 <+849>:	vinsertps $0x20,-0xc(%r8,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf439 <+857>:	vinsertps $0x30,-0xc(%rcx,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf441 <+865>:	vinsertf128 $0x1,%xmm2,%ymm4,%ymm2
   0x00007ffff7fbf447 <+871>:	vbroadcastss 0x10(%rsi,%r12,4),%ymm4
   0x00007ffff7fbf44e <+878>:	vfmadd213ps %ymm3,%ymm2,%ymm4
   0x00007ffff7fbf453 <+883>:	vmovups %ymm4,(%rdi,%rbp,4)
   0x00007ffff7fbf458 <+888>:	vmovss -0x8(%rdx,%r12,4),%xmm2
   0x00007ffff7fbf45f <+895>:	vinsertps $0x10,-0x8(%r9,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf467 <+903>:	vinsertps $0x20,-0x8(%r14,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf46f <+911>:	vinsertps $0x30,-0x8(%r13,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf477 <+919>:	vmovss -0x8(%r15,%r12,4),%xmm3
   0x00007ffff7fbf47e <+926>:	vinsertps $0x10,-0x8(%r10,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf486 <+934>:	vinsertps $0x20,-0x8(%r8,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf48e <+942>:	vinsertps $0x30,-0x8(%rcx,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf496 <+950>:	vinsertf128 $0x1,%xmm2,%ymm3,%ymm2
   0x00007ffff7fbf49c <+956>:	vbroadcastss 0x14(%rsi,%r12,4),%ymm3
   0x00007ffff7fbf4a3 <+963>:	vfmadd213ps %ymm4,%ymm2,%ymm3
   0x00007ffff7fbf4a8 <+968>:	vmovups %ymm3,(%rdi,%rbp,4)
   0x00007ffff7fbf4ad <+973>:	vmovss -0x4(%rdx,%r12,4),%xmm2
   0x00007ffff7fbf4b4 <+980>:	vinsertps $0x10,-0x4(%r9,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf4bc <+988>:	vinsertps $0x20,-0x4(%r14,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf4c4 <+996>:	vinsertps $0x30,-0x4(%r13,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf4cc <+1004>:	vmovss -0x4(%r15,%r12,4),%xmm4
   0x00007ffff7fbf4d3 <+1011>:	vinsertps $0x10,-0x4(%r10,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf4db <+1019>:	vinsertps $0x20,-0x4(%r8,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf4e3 <+1027>:	vinsertps $0x30,-0x4(%rcx,%r12,4),%xmm4,%xmm4
   0x00007ffff7fbf4eb <+1035>:	vinsertf128 $0x1,%xmm2,%ymm4,%ymm2
   0x00007ffff7fbf4f1 <+1041>:	vbroadcastss 0x18(%rsi,%r12,4),%ymm4
   0x00007ffff7fbf4f8 <+1048>:	vfmadd213ps %ymm3,%ymm2,%ymm4
   0x00007ffff7fbf4fd <+1053>:	vmovups %ymm4,(%rdi,%rbp,4)
   0x00007ffff7fbf502 <+1058>:	vmovss (%rdx,%r12,4),%xmm2
   0x00007ffff7fbf508 <+1064>:	vinsertps $0x10,(%r9,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf50f <+1071>:	vinsertps $0x20,(%r14,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf516 <+1078>:	vinsertps $0x30,0x0(%r13,%r12,4),%xmm2,%xmm2
   0x00007ffff7fbf51e <+1086>:	vmovss (%r15,%r12,4),%xmm3
   0x00007ffff7fbf524 <+1092>:	vinsertps $0x10,(%r10,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf52b <+1099>:	vinsertps $0x20,(%r8,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf532 <+1106>:	vinsertps $0x30,(%rcx,%r12,4),%xmm3,%xmm3
   0x00007ffff7fbf539 <+1113>:	vinsertf128 $0x1,%xmm2,%ymm3,%ymm3
   0x00007ffff7fbf53f <+1119>:	vbroadcastss 0x1c(%rsi,%r12,4),%ymm2
   0x00007ffff7fbf546 <+1126>:	vfmadd213ps %ymm4,%ymm3,%ymm2
   0x00007ffff7fbf54b <+1131>:	vmovups %ymm2,(%rdi,%rbp,4)
   0x00007ffff7fbf550 <+1136>:	add    $0x8,%r12
   0x00007ffff7fbf554 <+1140>:	cmp    %r12,%r11
   0x00007ffff7fbf557 <+1143>:	jne    0x7ffff7fbf2b0 <test_function+464>
   0x00007ffff7fbf55d <+1149>:	mov    -0x58(%rsp),%r11
   0x00007ffff7fbf562 <+1154>:	test   %r11,%r11
   0x00007ffff7fbf565 <+1157>:	je     0x7ffff7fbf635 <test_function+1365>
   0x00007ffff7fbf56b <+1163>:	vmovups (%rdi,%rbp,4),%ymm2
   0x00007ffff7fbf570 <+1168>:	lea    (%rsi,%r12,4),%r8
   0x00007ffff7fbf574 <+1172>:	add    %r12,%rax
   0x00007ffff7fbf577 <+1175>:	mov    -0x80(%rsp),%rcx
   0x00007ffff7fbf57c <+1180>:	lea    (%rcx,%rax,4),%r9
   0x00007ffff7fbf580 <+1184>:	mov    -0x30(%rsp),%rax
   0x00007ffff7fbf585 <+1189>:	add    %r12,%rax
   0x00007ffff7fbf588 <+1192>:	lea    (%rcx,%rax,4),%r10
   0x00007ffff7fbf58c <+1196>:	mov    -0x28(%rsp),%rax
   0x00007ffff7fbf591 <+1201>:	add    %r12,%rax
   0x00007ffff7fbf594 <+1204>:	lea    (%rcx,%rax,4),%r14
   0x00007ffff7fbf598 <+1208>:	mov    -0x20(%rsp),%rax
   0x00007ffff7fbf59d <+1213>:	add    %r12,%rax
   0x00007ffff7fbf5a0 <+1216>:	lea    (%rcx,%rax,4),%r15
   0x00007ffff7fbf5a4 <+1220>:	mov    -0x18(%rsp),%rax
   0x00007ffff7fbf5a9 <+1225>:	add    %r12,%rax
   0x00007ffff7fbf5ac <+1228>:	lea    (%rcx,%rax,4),%r13
   0x00007ffff7fbf5b0 <+1232>:	mov    -0x10(%rsp),%rax
   0x00007ffff7fbf5b5 <+1237>:	add    %r12,%rax
   0x00007ffff7fbf5b8 <+1240>:	lea    (%rcx,%rax,4),%rax
   0x00007ffff7fbf5bc <+1244>:	mov    -0x8(%rsp),%rdx
   0x00007ffff7fbf5c1 <+1249>:	add    %r12,%rdx
   0x00007ffff7fbf5c4 <+1252>:	lea    (%rcx,%rdx,4),%rbx
   0x00007ffff7fbf5c8 <+1256>:	mov    (%rsp),%rdx
   0x00007ffff7fbf5cc <+1260>:	add    %r12,%rdx
   0x00007ffff7fbf5cf <+1263>:	lea    (%rcx,%rdx,4),%rcx
   0x00007ffff7fbf5d3 <+1267>:	xor    %edx,%edx
   0x00007ffff7fbf5d5 <+1269>:	data16 nopw %cs:0x0(%rax,%rax,1)
   0x00007ffff7fbf5e0 <+1280>:	vmovss (%r15,%rdx,4),%xmm3
   0x00007ffff7fbf5e6 <+1286>:	vinsertps $0x10,(%r14,%rdx,4),%xmm3,%xmm3
   0x00007ffff7fbf5ed <+1293>:	vinsertps $0x20,(%r10,%rdx,4),%xmm3,%xmm3
   0x00007ffff7fbf5f4 <+1300>:	vinsertps $0x30,(%r9,%rdx,4),%xmm3,%xmm3
   0x00007ffff7fbf5fb <+1307>:	vmovss (%rcx,%rdx,4),%xmm4
   0x00007ffff7fbf600 <+1312>:	vinsertps $0x10,(%rbx,%rdx,4),%xmm4,%xmm4
   0x00007ffff7fbf607 <+1319>:	vinsertps $0x20,(%rax,%rdx,4),%xmm4,%xmm4
   0x00007ffff7fbf60e <+1326>:	vinsertps $0x30,0x0(%r13,%rdx,4),%xmm4,%xmm4
   0x00007ffff7fbf616 <+1334>:	vinsertf128 $0x1,%xmm3,%ymm4,%ymm3
   0x00007ffff7fbf61c <+1340>:	vbroadcastss (%r8,%rdx,4),%ymm4
   0x00007ffff7fbf622 <+1346>:	vfmadd231ps %ymm4,%ymm3,%ymm2
   0x00007ffff7fbf627 <+1351>:	vmovups %ymm2,(%rdi,%rbp,4)
   0x00007ffff7fbf62c <+1356>:	add    $0x1,%rdx
   0x00007ffff7fbf630 <+1360>:	cmp    %rdx,%r11
   0x00007ffff7fbf633 <+1363>:	jne    0x7ffff7fbf5e0 <test_function+1280>
   0x00007ffff7fbf635 <+1365>:	mov    0x10(%rsp),%rcx
   0x00007ffff7fbf63a <+1370>:	add    $0x1,%rcx
   0x00007ffff7fbf63e <+1374>:	mov    0x8(%rsp),%rdx
   0x00007ffff7fbf643 <+1379>:	add    $0x8,%rdx
   0x00007ffff7fbf647 <+1383>:	vpaddd %ymm1,%ymm0,%ymm0
   0x00007ffff7fbf64b <+1387>:	cmp    -0x38(%rsp),%rcx
   0x00007ffff7fbf650 <+1392>:	mov    -0x40(%rsp),%r12
   0x00007ffff7fbf655 <+1397>:	mov    -0x50(%rsp),%r11
   0x00007ffff7fbf65a <+1402>:	jne    0x7ffff7fbf1f0 <test_function+272>
   0x00007ffff7fbf660 <+1408>:	cmpq   $0x0,-0x68(%rsp)
   0x00007ffff7fbf666 <+1414>:	mov    -0x70(%rsp),%rax
   0x00007ffff7fbf66b <+1419>:	je     0x7ffff7fbf7c2 <test_function+1762>
   0x00007ffff7fbf671 <+1425>:	add    %rax,%r12
   0x00007ffff7fbf674 <+1428>:	mov    -0x78(%rsp),%rcx
   0x00007ffff7fbf679 <+1433>:	mov    %ecx,%eax
   0x00007ffff7fbf67b <+1435>:	and    $0x7,%eax
   0x00007ffff7fbf67e <+1438>:	lea    -0x1(%rcx),%r9
   0x00007ffff7fbf682 <+1442>:	mov    %rcx,%r15
   0x00007ffff7fbf685 <+1445>:	sub    %rax,%r15
   0x00007ffff7fbf688 <+1448>:	mov    -0x80(%rsp),%rdx
   0x00007ffff7fbf68d <+1453>:	lea    0x1c(%rdx),%r8
   0x00007ffff7fbf691 <+1457>:	mov    %r12d,%r11d
   0x00007ffff7fbf694 <+1460>:	imul   %ecx,%r11d
   0x00007ffff7fbf698 <+1464>:	xor    %r14d,%r14d
   0x00007ffff7fbf69b <+1467>:	nopl   0x0(%rax,%rax,1)
   0x00007ffff7fbf6a0 <+1472>:	movslq %r11d,%r10
   0x00007ffff7fbf6a3 <+1475>:	movslq %r12d,%rcx
   0x00007ffff7fbf6a6 <+1478>:	cmp    $0x7,%r9
   0x00007ffff7fbf6aa <+1482>:	jae    0x7ffff7fbf6c0 <test_function+1504>
   0x00007ffff7fbf6ac <+1484>:	xor    %ebx,%ebx
   0x00007ffff7fbf6ae <+1486>:	test   %rax,%rax
   0x00007ffff7fbf6b1 <+1489>:	jne    0x7ffff7fbf771 <test_function+1681>
   0x00007ffff7fbf6b7 <+1495>:	jmp    0x7ffff7fbf7aa <test_function+1738>
   0x00007ffff7fbf6bc <+1500>:	nopl   0x0(%rax)
   0x00007ffff7fbf6c0 <+1504>:	lea    (%r8,%r10,4),%rbp
   0x00007ffff7fbf6c4 <+1508>:	vmovss (%rdi,%rcx,4),%xmm0
   0x00007ffff7fbf6c9 <+1513>:	xor    %ebx,%ebx
   0x00007ffff7fbf6cb <+1515>:	nopl   0x0(%rax,%rax,1)
   0x00007ffff7fbf6d0 <+1520>:	vmovss -0x1c(%rbp,%rbx,4),%xmm1
   0x00007ffff7fbf6d6 <+1526>:	vfmadd132ss (%rsi,%rbx,4),%xmm0,%xmm1
   0x00007ffff7fbf6dc <+1532>:	vmovss %xmm1,(%rdi,%rcx,4)
   0x00007ffff7fbf6e1 <+1537>:	vmovss -0x18(%rbp,%rbx,4),%xmm0
   0x00007ffff7fbf6e7 <+1543>:	vfmadd132ss 0x4(%rsi,%rbx,4),%xmm1,%xmm0
   0x00007ffff7fbf6ee <+1550>:	vmovss %xmm0,(%rdi,%rcx,4)
   0x00007ffff7fbf6f3 <+1555>:	vmovss -0x14(%rbp,%rbx,4),%xmm1
   0x00007ffff7fbf6f9 <+1561>:	vfmadd132ss 0x8(%rsi,%rbx,4),%xmm0,%xmm1
   0x00007ffff7fbf700 <+1568>:	vmovss %xmm1,(%rdi,%rcx,4)
   0x00007ffff7fbf705 <+1573>:	vmovss -0x10(%rbp,%rbx,4),%xmm0
   0x00007ffff7fbf70b <+1579>:	vfmadd132ss 0xc(%rsi,%rbx,4),%xmm1,%xmm0
   0x00007ffff7fbf712 <+1586>:	vmovss %xmm0,(%rdi,%rcx,4)
   0x00007ffff7fbf717 <+1591>:	vmovss -0xc(%rbp,%rbx,4),%xmm1
   0x00007ffff7fbf71d <+1597>:	vfmadd132ss 0x10(%rsi,%rbx,4),%xmm0,%xmm1
   0x00007ffff7fbf724 <+1604>:	vmovss %xmm1,(%rdi,%rcx,4)
   0x00007ffff7fbf729 <+1609>:	vmovss -0x8(%rbp,%rbx,4),%xmm0
   0x00007ffff7fbf72f <+1615>:	vfmadd132ss 0x14(%rsi,%rbx,4),%xmm1,%xmm0
   0x00007ffff7fbf736 <+1622>:	vmovss %xmm0,(%rdi,%rcx,4)
   0x00007ffff7fbf73b <+1627>:	vmovss -0x4(%rbp,%rbx,4),%xmm1
   0x00007ffff7fbf741 <+1633>:	vfmadd132ss 0x18(%rsi,%rbx,4),%xmm0,%xmm1
   0x00007ffff7fbf748 <+1640>:	vmovss %xmm1,(%rdi,%rcx,4)
   0x00007ffff7fbf74d <+1645>:	vmovss 0x0(%rbp,%rbx,4),%xmm0
   0x00007ffff7fbf753 <+1651>:	vfmadd132ss 0x1c(%rsi,%rbx,4),%xmm1,%xmm0
   0x00007ffff7fbf75a <+1658>:	vmovss %xmm0,(%rdi,%rcx,4)
   0x00007ffff7fbf75f <+1663>:	add    $0x8,%rbx
   0x00007ffff7fbf763 <+1667>:	cmp    %rbx,%r15
   0x00007ffff7fbf766 <+1670>:	jne    0x7ffff7fbf6d0 <test_function+1520>
   0x00007ffff7fbf76c <+1676>:	test   %rax,%rax
   0x00007ffff7fbf76f <+1679>:	je     0x7ffff7fbf7aa <test_function+1738>
   0x00007ffff7fbf771 <+1681>:	vmovss (%rdi,%rcx,4),%xmm0
   0x00007ffff7fbf776 <+1686>:	lea    (%rsi,%rbx,4),%rbp
   0x00007ffff7fbf77a <+1690>:	add    %rbx,%r10
   0x00007ffff7fbf77d <+1693>:	mov    -0x80(%rsp),%rdx
   0x00007ffff7fbf782 <+1698>:	lea    (%rdx,%r10,4),%rbx
   0x00007ffff7fbf786 <+1702>:	xor    %edx,%edx
   0x00007ffff7fbf788 <+1704>:	nopl   0x0(%rax,%rax,1)
   0x00007ffff7fbf790 <+1712>:	vmovss (%rbx,%rdx,4),%xmm1
   0x00007ffff7fbf795 <+1717>:	vfmadd231ss 0x0(%rbp,%rdx,4),%xmm1,%xmm0
   0x00007ffff7fbf79c <+1724>:	vmovss %xmm0,(%rdi,%rcx,4)
   0x00007ffff7fbf7a1 <+1729>:	add    $0x1,%rdx
   0x00007ffff7fbf7a5 <+1733>:	cmp    %rdx,%rax
   0x00007ffff7fbf7a8 <+1736>:	jne    0x7ffff7fbf790 <test_function+1712>
   0x00007ffff7fbf7aa <+1738>:	add    $0x1,%r14
   0x00007ffff7fbf7ae <+1742>:	add    $0x1,%r12
   0x00007ffff7fbf7b2 <+1746>:	add    -0x78(%rsp),%r11d
   0x00007ffff7fbf7b7 <+1751>:	cmp    -0x68(%rsp),%r14
   0x00007ffff7fbf7bc <+1756>:	jne    0x7ffff7fbf6a0 <test_function+1472>
   0x00007ffff7fbf7c2 <+1762>:	add    $0x18,%rsp
   0x00007ffff7fbf7c6 <+1766>:	pop    %rbx
   0x00007ffff7fbf7c7 <+1767>:	pop    %r12
   0x00007ffff7fbf7c9 <+1769>:	pop    %r13
   0x00007ffff7fbf7cb <+1771>:	pop    %r14
   0x00007ffff7fbf7cd <+1773>:	pop    %r15
   0x00007ffff7fbf7cf <+1775>:	pop    %rbp
   0x00007ffff7fbf7d0 <+1776>:	vzeroupper
   0x00007ffff7fbf7d3 <+1779>:	ret
End of assembler dump.
